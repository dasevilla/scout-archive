name: Requirements archiver

on:
  schedule:
    # Run weekly on Sunday at 2 AM Pacific Time (9 AM UTC)
    - cron: "0 9 * * 0"
  workflow_dispatch: # Allow manual triggering
    inputs:
      force_release:
        description: "Force release creation even if no changes detected"
        required: false
        type: boolean
        default: false

permissions:
  contents: write

jobs:
  archive:
    runs-on: ubuntu-latest
    outputs:
      has-changes: ${{ steps.commit-changes.outputs.has-changes }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1 # Only fetch the latest commit to compare changes

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "0.6.11"

      - name: Enable caching
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Run archiving process
        run: make archive

      - name: Build the index
        run: make index

      - name: Upload the archive log as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: archive-log
          path: run.log
          retention-days: 7
          if-no-files-found: warn

      - name: Upload markdown files as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: merit-badge-markdown
          path: |
            build/merit-badges/*.md
            build/merit-badges/images
          retention-days: 7
          if-no-files-found: warn

      - name: Upload JSON files as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: merit-badge-json
          path: |
            build/merit-badges/*.json
            build/merit-badges/images
          retention-days: 7
          if-no-files-found: warn

      - name: Validate the archive
        run: make validate

      - name: Generate change report
        run: make report

      - name: Get release info
        id: release-info
        run: |
          DATE=$(date +%Y-%m-%d)
          RELEASE_TAG="archive-$DATE-$GITHUB_RUN_NUMBER-$GITHUB_RUN_ATTEMPT"
          echo "release-tag=$RELEASE_TAG" >> $GITHUB_OUTPUT

          GENERATED_DATE=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          echo "generated-date=$GENERATED_DATE" >> $GITHUB_OUTPUT

          if [ "$GITHUB_RUN_ATTEMPT" = "1" ]; then
            RELEASE_NAME="Merit Badge Archive - $DATE (Build $GITHUB_RUN_NUMBER)"
          else
            RELEASE_NAME="Merit Badge Archive - $DATE (Build $GITHUB_RUN_NUMBER, Attempt $GITHUB_RUN_ATTEMPT)"
          fi
          echo "release-name=$RELEASE_NAME" >> $GITHUB_OUTPUT

          # Count files for release notes
          JSON_COUNT=$(ls build/merit-badges/*.json 2>/dev/null | wc -l)
          MD_COUNT=$(ls build/merit-badges/*.md 2>/dev/null | wc -l)
          echo "json-count=$JSON_COUNT" >> $GITHUB_OUTPUT
          echo "md-count=$MD_COUNT" >> $GITHUB_OUTPUT

      - name: Create job summary
        run: |
          if [ -f change-report.txt ]; then
            echo "### Change Report" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            cat change-report.txt >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check for changes and commit
        id: commit-changes
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Add files to the commit
          git add build/merit-badges/*.json build/merit-badges/images/*

          # Check if there are changes
          if git diff --staged --quiet; then
            echo "No changes detected"
            echo "has-changes=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "has-changes=true" >> $GITHUB_OUTPUT

          # Create commit with a detailed message
          git commit -F- <<EOF
          Update archive ($(date +"%Y-%m-%d"))

          $(cat change-report.txt)

          Automated archive via GitHub Actions
          EOF

      - name: Push changes
        if: steps.commit-changes.outputs.has-changes == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}

      - name: Check for failures
        if: failure()
        run: |
          echo "::error::Archiving job failed! This could indicate a change in the source website structure or validation failed."

      # - name: Create issue on failure
      #   if: failure()
      #   uses: JasonEtco/create-an-issue@v2
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     filename: .github/ISSUE_TEMPLATE/archiver-failure.md
      #     update_existing: true
      #     search_existing: open

  create-release:
    runs-on: ubuntu-latest
    needs: archive
    if: needs.archive.outputs.has-changes == 'true' || inputs.force_release == true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download artifacts for release
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: Validate artifacts and create archives
        run: |
          # Validate required artifacts exist
          if [ ! -d "release-assets/merit-badge-json" ] || [ ! -d "release-assets/merit-badge-markdown" ]; then
            echo "::error::Required artifacts not found"
            exit 1
          fi

          # Count files for validation
          JSON_COUNT=$(find release-assets/merit-badge-json -name "*.json" | wc -l)
          MD_COUNT=$(find release-assets/merit-badge-markdown -name "*.md" | wc -l)

          if [ "$JSON_COUNT" -eq 0 ] || [ "$MD_COUNT" -eq 0 ]; then
            echo "::error::No files found in artifacts"
            exit 1
          fi

          echo "Creating archives with $JSON_COUNT JSON files and $MD_COUNT markdown files"

          # Create tar.gz files from artifacts
          cd release-assets
          tar -czf ../merit-badges-json.tar.gz -C merit-badge-json .
          tar -czf ../merit-badges-markdown.tar.gz -C merit-badge-markdown .

          # Handle images - check both artifact locations
          if [ -d "merit-badge-json/images" ]; then
            tar -czf ../merit-badges-images.tar.gz -C merit-badge-json images
          elif [ -d "merit-badge-markdown/images" ]; then
            tar -czf ../merit-badges-images.tar.gz -C merit-badge-markdown images
          else
            echo "::warning::No images directory found, creating empty archive"
            tar -czf ../merit-badges-images.tar.gz --files-from /dev/null
          fi

      - name: Get release info
        id: release-info
        run: |
          DATE=$(date +%Y-%m-%d)
          RELEASE_TAG="archive-$DATE-$GITHUB_RUN_NUMBER-$GITHUB_RUN_ATTEMPT"
          echo "release-tag=$RELEASE_TAG" >> $GITHUB_OUTPUT

          GENERATED_DATE=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          echo "generated-date=$GENERATED_DATE" >> $GITHUB_OUTPUT

          if [ "$GITHUB_RUN_ATTEMPT" = "1" ]; then
            RELEASE_NAME="Scout Archive Update - $DATE"
          else
            RELEASE_NAME="Scout Archive Update - $DATE (Attempt $GITHUB_RUN_ATTEMPT)"
          fi
          echo "release-name=$RELEASE_NAME" >> $GITHUB_OUTPUT

          # Read change report if it exists
          if [ -f "change-report.txt" ]; then
            CHANGE_REPORT=$(cat change-report.txt)
          else
            CHANGE_REPORT="No change report available"
          fi
          # Use multiline output format for GitHub Actions
          echo "change-report<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGE_REPORT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.release-info.outputs.release-tag }}
          name: ${{ steps.release-info.outputs.release-name }}
          body: |
            ${{ steps.release-info.outputs.change-report }}
          files: |
            merit-badges-json.tar.gz
            merit-badges-markdown.tar.gz
            merit-badges-images.tar.gz
          draft: false
          prerelease: false

  deploy-site:
    runs-on: ubuntu-latest
    needs: archive

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Download Markdown artifacts
        uses: actions/download-artifact@v4
        with:
          name: merit-badge-markdown
          path: build/merit-badges/

      - name: Build website
        run: |
          # Create website directory
          mkdir -p _site
          # Copy Markdown files
          cp -R build/merit-badges/*.md _site/ 2>/dev/null || true
          # If no markdown files were found, generate a default index
          if [ ! -f _site/index.md ]; then
            echo "# Scout requirements archive" > _site/index.md
            echo "" >> _site/index.md
            echo "An unofficial automated archive of Scouting America requirements." >> _site/index.md
            echo "" >> _site/index.md
            echo "**Last updated:** $(date +"%Y-%m-%d")" >> _site/index.md
          fi
          # Copy images and PDF files
          mkdir -p _site/images _site/files
          cp -R build/merit-badges/images/* _site/images/ 2>/dev/null || true
          cp -R build/merit-badges/files/* _site/files/ 2>/dev/null || true
          # Create Jekyll config file
          echo "theme: jekyll-theme-cayman" > _site/_config.yml
          echo "title: Scout requirements archive" >> _site/_config.yml
          echo "description: Unofficial archive of Scouting America requirements" >> _site/_config.yml

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: _site # The folder the action should deploy
          branch: gh-pages # The branch the action should deploy to
